{"version":3,"sources":["plugins/requests/index.js","tree/actions/libs.js","Views/Main.js","App.js","serviceWorker.js","tree/tree.js","index.js"],"names":["axios","require","rootUrl","setLibs","tree","libs","set","Wrapper","styled","div","Main","useBranch","dispatch","useEffect","path","params","from","query","get","then","res","libsActions","data","console","log","App","Root","useRoot","Boolean","window","location","hostname","match","Baobab","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4MAAMA,G,MAAQC,EAAQ,KAEhBC,EAAU,kC,mBCFT,SAASC,EAAQC,EAAMC,GAC1BD,EAAKE,IAAI,CAAC,QAAQD,G,6FCMtB,IAAME,E,MAAUC,EAAOC,IAAV,KAuBEC,MAlBf,WAAiB,IAAD,EACaC,oBAAU,CAAEN,KAAM,CAAC,UAAtCA,EADM,EACNA,KAAMO,EADA,EACAA,SAUd,OARAC,qBAAU,YFXZ,SAAaC,EAAMC,GACjB,IAAIC,EAAI,UAAMd,GAAN,OAAgBY,GACpBG,EAAQ,CAAEF,UAEd,OAAOf,EAAMkB,IAAIF,EAAMC,IEQnBC,CAAI,oBAAoBC,MAAK,SAACC,GAC1BR,EAASS,EAAoBD,EAAIE,WAEvC,IAEFC,QAAQC,IAAInB,GAGR,kBAACE,EAAD,KACI,2BAAIF,EAAK,MCAJoB,MAXf,YAAsB,IAARrB,EAAO,EAAPA,KAENsB,EAAOC,kBAAQvB,GAErB,OACE,kBAACsB,EAAD,KACE,kBAAC,EAAD,QCRcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCZS5B,EAJF,I,OAAI6B,GAAO,CACtB5B,KAAM,KCIR6B,IAASC,OAAO,kBAAC,EAAD,CAAK/B,KAAMA,IAAUgC,SAASC,eAAe,SF0HvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.9e2bd27e.chunk.js","sourcesContent":["const axios = require(\"axios\");\r\n\r\nconst rootUrl = \"http://localhost:5588/mocking_G\";\r\n\r\nfunction get(path, params) {\r\n  let from = `${rootUrl}${path}`;\r\n  let query = { params };\r\n\r\n  return axios.get(from, query);\r\n}\r\n\r\nexport { get };\r\n","export function setLibs(tree, libs) {\r\n    tree.set(['libs'],libs);\r\n}","import React, { useEffect } from \"react\";\r\nimport { useBranch } from \"baobab-react/hooks\";\r\nimport styled from \"styled-components\";\r\n\r\nimport * as libsActions from \"../tree/actions/libs\";\r\nimport { get } from \"../plugins/requests\";\r\n\r\nconst Wrapper = styled.div`\r\n    background: red;\r\n`\r\n\r\n\r\nfunction Main() {\r\n  const { libs, dispatch } = useBranch({ libs: [\"libs\"] });\r\n\r\n  useEffect(()=>{\r\n      get('/getAllLibraries').then((res)=>{\r\n          dispatch(libsActions.setLibs,res.data)\r\n      });\r\n  },[]);\r\n\r\n  console.log(libs)\r\n\r\n  return (\r\n      <Wrapper>\r\n          <p>{libs[0]}</p>\r\n      </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport { get } from \"./plugins/requests\";\nimport {useRoot} from 'baobab-react/hooks';\n\nimport Main from \"./Views/Main\";\n\n// get('/getTypes').then((res)=>{\n//   console.log(res.data)\n// });\n\n// get('/getScheme',{library:'first',category:'test'}).then((res)=>{\n//   console.log(res.data)\n// });\n\nfunction App({tree}) {\n\n  const Root = useRoot(tree);\n\n  return (\n    <Root>\n      <Main/>\n    </Root>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Baobab from 'baobab';\r\n\r\nconst tree = new Baobab({\r\n  libs: []\r\n});\r\n\r\nexport default tree;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport tree from \"./tree/tree\";\n\nReactDOM.render(<App tree={tree} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}