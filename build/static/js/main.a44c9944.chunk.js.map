{"version":3,"sources":["plugins/requests/index.js","plugins/styled/Mask.js","plugins/Layouts/Column.js","plugins/Layouts/Row.js","plugins/styled/Label.js","tree/actions/libs.js","Views/LeftPanel.js","Views/Main.js","App.js","serviceWorker.js","tree/tree.js","index.js"],"names":["axios","require","rootUrl","get","path","params","from","query","Mask","styled","div","props","opacity","mask","defaultProps","propTypes","PropTypes","number","string","Column","height","background","flex","shadowColor","oneOfType","Row","width","menuItem","Label","color","fontSize","setLibs","tree","libs","set","LeftPanel","useBranch","dispatch","useState","useEffect","then","res","libsActions","data","map","lib","key","onClick","library","console","log","getCategoriesFromLibrary","Main","style","display","App","Root","useRoot","Boolean","window","location","hostname","match","Baobab","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a44c9944.chunk.js","sourcesContent":["const axios = require(\"axios\");\r\n\r\nconst rootUrl = \"http://localhost:5588/mocking_G\";\r\n\r\nfunction get(path, params) {\r\n  let from = `${rootUrl}${path}`;\r\n  let query = { params };\r\n\r\n  return axios.get(from, query);\r\n}\r\n\r\nexport { get };\r\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Mask = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  opacity: ${props => props.opacity};\n  background: ${props => props.mask};\n`;\n\nMask.defaultProps = {\n    opacity: 0.7,\n    mask: 'white',\n  }\n  \n  Mask.propTypes = {\n    opacity: PropTypes.number,\n    mask: PropTypes.string,\n  }\n  \n  \n  export default Mask","import styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Column = styled.div`\n  position: relative;\n  min-width: 100px;\n  height: ${props => props.height || \"100%\"};\n  background: ${props => props.background || \"inherit\"};\n  display: flex;\n  flex: ${props => props.flex || 0.2};\n  flex-direction: column;\n  justify-content: flex-start;\n  overflow: auto;\n  box-shadow: 1px 0px 4px 0px\n    ${props => props.shadowColor || \"rgb(93, 107, 140)\"};\n`;\n\nColumn.propTypes = {\n  flex: PropTypes.number,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  background: PropTypes.string,\n  shadowColor: PropTypes.string\n};\n\nexport default Column;\n","import styled from 'styled-components';\nimport PropTypes from \"prop-types\";\n\nconst Row = styled.div`   \n  min-height: 50px;\n  height: ${props => props.height || '50px'};\n  width: ${props => props.width || '100%'};\n  background: ${props => props.background || 'inherit'};\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  cursor:  ${(props) => (props.menuItem ? 'pointer' : 'inherit')};\n  box-shadow: 0px 1px 4px 0px ${props => props.shadowColor ||  'rgb(93, 107, 140)'};\n  :hover {\n    background: ${(props) => (props.menuItem ? '#6693b8' : 'inherit')};\n  }\n  :active {\n    background: ${(props) => (props.menuItem ? '#4e79b9' : 'inherit')};\n  }\n`\n\nRow.propTypes = {\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  background: PropTypes.string,\n  shadowColor: PropTypes.string\n};\n\nexport default Row;","import styled from 'styled-components';\n\nconst Label = styled.div`   \n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding: 0 10px;\n  width: ${props => props.width || 'fit-content'};\n  color: ${props => props.color || 'inherit'};\n  font-size: ${props => props.fontSize || 'inherit'};\n`\n\nexport default Label;","export function setLibs(tree, libs) {\r\n    tree.set(['libs'],libs);\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useBranch } from \"baobab-react/hooks\";\r\n\r\nimport Column from \"../plugins/Layouts/Column\";\r\nimport Row from \"../plugins/Layouts/Row\";\r\nimport Label from \"../plugins/styled/Label\";\r\n\r\nimport * as libsActions from \"../tree/actions/libs\";\r\nimport { get } from \"../plugins/requests\";\r\n\r\nfunction LeftPanel() {\r\n  const { libs, dispatch } = useBranch({ libs: [\"libs\"] });\r\n  const [navContext, setNavContext] = useState(\"libs\");\r\n\r\n  useEffect(() => {\r\n    get(\"/getAllLibraries\").then(res => {\r\n      dispatch(libsActions.setLibs, res.data);\r\n    });\r\n  }, []);\r\n\r\n  const NavBar = () => {\r\n    return <Row>nav Bar</Row>;\r\n  };\r\n\r\n  const getCategoriesFromLibrary = (lib)=>{\r\n      get(\"/getCategoriesFromLibrary\",{library:lib}).then(res => {\r\n        console.log(res.data)\r\n      });\r\n  }\r\n\r\n  const RenderList = () => {\r\n    return libs.map(lib => (\r\n      <Row key={lib} menuItem={true} onClick={()=>{ getCategoriesFromLibrary(lib) }}>\r\n        <Label>{lib}</Label>\r\n      </Row>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Column flex={0.15}>\r\n      <NavBar />\r\n      <RenderList />\r\n    </Column>\r\n  );\r\n}\r\n\r\nexport default LeftPanel;\r\n","import React, { Suspense } from \"react\";\r\n\r\nimport Mask from \"../plugins/styled/Mask\";\r\nimport LeftPanel from \"./LeftPanel\";\r\n\r\nfunction Main() {\r\n    \r\n  return (\r\n      <Mask opacity={1} style={{display:'flex'}}>\r\n            <LeftPanel/>\r\n      </Mask>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport { get } from \"./plugins/requests\";\nimport {useRoot} from 'baobab-react/hooks';\n\nimport Main from \"./Views/Main\";\n\n// get('/getTypes').then((res)=>{\n//   console.log(res.data)\n// });\n\n// get('/getScheme',{library:'first',category:'test'}).then((res)=>{\n//   console.log(res.data)\n// });\n\nfunction App({tree}) {\n\n  const Root = useRoot(tree);\n\n  return (\n    <Root>\n      <Main/>\n    </Root>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Baobab from 'baobab';\r\n\r\nconst tree = new Baobab({\r\n  libs: []\r\n});\r\n\r\nexport default tree;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport tree from \"./tree/tree\";\n\nReactDOM.render(<App tree={tree} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}